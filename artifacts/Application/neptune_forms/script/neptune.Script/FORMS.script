const FORMS = {
    model: null,
    config: null,
    cache: [],
    formParent: null,
    formTitleHide: [],

    build: function (parent, options) {
        if (!options.config) {
            options.config = ModelData.FindFirst(FORMS.cache, "id", options.id);

            if (!options.config) {
                var actions = [];
                actions.push(FORMS.apiGetForm(options.id));

                Promise.all(actions).then(function (values) {
                    options.config = values[0];
                    FORMS.cache.push(options.config);
                    FORMS.buildForm(parent, options);
                });
            } else {
                FORMS.buildForm(parent, options);
            }
        } else {
            FORMS.buildForm(parent, options);
        }
    },

    buildForm: function (parent, options) {
        FORMS.formTitleHide = [];
        FORMS.config = options.config;

        // Parent
        if (!FORMS.formParent) {
            FORMS.formParent = new sap.m.Panel({
                backgroundDesign: "Transparent",
            });

            FORMS.formParent.onAfterRendering = function (oEvent) {
                FORMS.formTitleHide.forEach(function (fieldID) {
                    const formTitle = sap.ui.getCore().byId(fieldID);
                    const formTitleDomRef = formTitle.getDomRef();
                    if (formTitleDomRef) {
                        formTitleDomRef.style.height = "0px";
                    }
                });
            };

            FORMS.formParent.addStyleClass("sapUiNoContentPadding");
        } else {
            FORMS.formParent.destroyContent();
        }

        // Model
        const formModel = new sap.ui.model.json.JSONModel();

        if (options.data) {
            formModel.setData(options.data);
        } else {
            formModel.setData({});
        }

        FORMS.formParent.setModel(formModel);
        formModel.refresh();

        let sectionForm;

        // Section
        options.config.setup.forEach(function (section, i) {
            switch (section.type) {
                case "Form":
                    const sectionPanel = new sap.m.Panel({
                        headerText: section.title,
                        expandable: section.expandable,
                        expanded: section.expanded,
                    });

                    sectionPanel.addStyleClass("sapUiSmallMarginBottom");

                    sectionForm = new sap.ui.layout.form.SimpleForm({
                        layout: "ResponsiveGridLayout",
                        editable: true,
                        labelSpanL: parseInt(section.labelSpanL) || 4,
                        labelSpanM: parseInt(section.labelSpanM) || 2,
                        labelSpanS: parseInt(section.labelSpanS) || 12,
                        columnsXL: parseInt(section.columnsXL) || -1,
                        columnsL: parseInt(section.columnsL) || 2,
                        columnsM: parseInt(section.columnsM) || 1,
                    });

                    sectionPanel.addContent(sectionForm);

                    FORMS.formParent.addContent(sectionPanel);
                    break;
            }

            // Elements
            section.elements.forEach(function (element, i) {
                FORMS.buildElement(sectionForm, element);
            });
        });

        if (parent.addContent) parent.addContent(FORMS.formParent);
        if (parent.addItem) parent.addItem(FORMS.formParent);
    },

    buildElement: function (parent, element) {
        let elementField;

        let addLabel = true;
        if (!element.enableLabel) addLabel = false;

        const elementLabel = new sap.m.Label({
            text: element.title,
            required: element.required,
            design: "Bold",
        });

        switch (element.type) {
            case "FormTitle":
                addLabel = false;
                elementField = FORMS.buildElementFormTitle(element);
                break;

            case "TextArea":
                elementField = FORMS.buildElementTextArea(element);
                break;

            case "StepInput":
                elementField = FORMS.buildElementStepInput(element);
                break;

            case "Switch":
                elementField = FORMS.buildElementSwitch(element);
                break;

            case "CheckBox":
                elementField = FORMS.buildElementCheckBox(element);
                break;

            case "SingleSelect":
                elementField = FORMS.buildElementSingleSelect(element);
                break;

            case "SingleChoice":
                elementField = FORMS.buildElementSingleChoice(element);
                break;

            case "MultipleSelect":
                elementField = FORMS.buildElementMultipleSelect(element);
                break;

            case "MultipleChoice":
                elementField = FORMS.buildElementMultipleChoice(element);
                break;

            case "DatePicker":
                elementField = FORMS.buildElementDatePicker(element);
                break;

            case "Image":
                elementField = FORMS.buildElementImage(element);
                break;

            case "DateTimePicker":
                elementField = FORMS.buildElementDateTimePicker(element);
                break;

            case "CheckList":
                elementField = FORMS.buildElementCheckList(element);
                break;

            default:
                elementField = new sap.m.Input(FORMS.buildElementFieldID(element), {
                    value: "{/" + element.id + "}",
                    placeholder: element.placeholder,
                });
                break;
        }

        if (!elementField) return;

        if (addLabel) parent.addContent(elementLabel);

        if (element.enableDescription) {
            const vBox = new sap.m.VBox({ width: "100%", wrap: "Wrap" });
            vBox.addItem(elementField);
            vBox.addItem(new sap.m.Label({ text: element.description, wrapping: true }));
            parent.addContent(vBox);
        } else {
            parent.addContent(elementField);
        }
    },

    buildElementFieldID: function (element) {
        return "field" + element.id;
    },

    buildElementFormTitle: function (element) {
        const newField = new sap.ui.core.Title(FORMS.buildElementFieldID(element), {
            text: element.enableLabel ? element.title : "",
        });

        if (!element.enableLabel) {
            FORMS.formTitleHide.push(FORMS.buildElementFieldID(element));
        }

        return newField;
    },

    buildElementTextArea: function (element) {
        const newField = new sap.m.TextArea(FORMS.buildElementFieldID(element), {
            value: "{/" + element.id + "}",
            placeholder: element.placeholder,
            growing: element.growing,
            rows: parseInt(element.rows),
            width: "100%",
        });
        if (element.rows) newField.setRows(parseInt(element.rows));

        return newField;
    },

    buildElementStepInput: function (element) {
        const newField = new sap.m.StepInput(FORMS.buildElementFieldID(element), {
            value: "{/" + element.id + "}",
            placeholder: element.placeholder,
        });

        if (element.min) newField.setMin(parseInt(element.min));
        if (element.max) newField.setMax(parseInt(element.max));

        return newField;
    },

    buildElementSwitch: function (element) {
        const newField = new sap.m.Switch(FORMS.buildElementFieldID(element), {
            state: "{/" + element.id + "}",
            customTextOff: element.customTextOff,
            customTextOn: element.customTextOn,
        });

        if (element.approveSwitch) {
            elementField.setType("AcceptReject");
        }

        return newField;
    },

    buildElementCheckBox: function (element) {
        const newField = new sap.m.CheckBox(FORMS.buildElementFieldID(element), {
            selected: "{/" + element.id + "}",
            text: element.text,
        });

        return newField;
    },

    buildElementSingleSelect: function (element) {
        const newField = new sap.m.ComboBox(FORMS.buildElementFieldID(element), {
            selectedKey: "{/" + element.id + "}",
        });

        element.items.forEach(function (item, i) {
            elementField.addItem(new sap.ui.core.Item({ key: item.key, text: item.title }));
        });

        return newField;
    },

    buildElementSingleChoice: function (element) {
        let newField;

        if (element.horizontal) {
            newField = new sap.m.HBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
            });
        } else {
            newField = new sap.m.VBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
            });
        }

        // // TODO - Implement generic if we should have conditional visibility
        // if (element.condField) {
        //     const formatParts = "/" + element.id;

        //     elementField.bindProperty("visible", {
        //         parts: [formatParts],
        //         formatter: function () {
        //             const formModel = FORMS.formParent.getModel();
        //             if (formModel.oData[element.condField] === element.condValue) {
        //                 return true;
        //             } else {
        //                 return false;
        //             }
        //         },
        //     });
        // }

        element.items.forEach(function (item, i) {
            const elementRadio = new sap.m.RadioButton({
                text: item.title,
                width: element.width,
                groupName: element.id,
                select: function (oEvent) {
                    const formModel = FORMS.formParent.getModel();
                    formModel.oData[element.id] = item.key;
                    formModel.refresh(true);
                },
            });

            elementRadio.addStyleClass("sapUiTinyMarginBegin");
            newField.addItem(elementRadio);
        });

        return newField;
    },

    buildElementMultipleSelect: function (element) {
        const newField = new sap.m.MultiComboBox(FORMS.buildElementFieldID(element), {
            selectedKeys: "{/" + element.id + "}",
        });

        element.items.forEach(function (item, i) {
            elementField.addItem(new sap.ui.core.Item({ key: item.key, text: item.title }));
        });

        return newField;
    },

    buildElementMultipleChoice: function (element) {

        let newField;

        if (element.horizontal) {
            newField = new sap.m.HBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
            });
        } else {
            newField = new sap.m.VBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
            });
        }

        element.items.forEach(function (item, i) {
            newField.addItem(
                new sap.m.CheckBox({
                    width: element.width,
                    text: item.title,
                    selected: "{/" + item.id + "}",
                })
            );
        });

        
        return newField;
    },

    buildElementDatePicker: function (element) {
        const newField = new sap.m.DatePicker(FORMS.buildElementFieldID(element), {
            value: "{/" + element.id + "}",
        });

        return newField;
    },

    buildElementImage: function (element) {
        const newField = new sap.m.VBox({
            width: "100%",
        });

        const elementUploader = new sap.m.Button({
            type: element.buttonType,
            text: element.text,
            press: function (oEvent) {
                FORMS.elementUpload = element;
                $("#imageUploader").click();
            },
        }).addStyleClass("sapUiSizeCompact");

        const elementImage = new sap.m.Image({
            height: "200px",
            src: "{/" + element.id + "}",
        });

        newField.addItem(elementUploader);
        newField.addItem(elementImage);

        return newField;
    },

    buildElementDateTimePicker: function (element) {
        const newField = new sap.m.DateTimePicker(FORMS.buildElementFieldID(element), {
            value: "{/" + element.id + "}",
        });

        return newField;
    },

    buildElementCheckList: function (element) {
        const tabCheckList = new sap.m.Table({
            showSeparators: sap.m.ListSeparators.None,
            backgroundDesign: "Transparent",
        });

        // Columns
        const colQuestion = new sap.m.Column();
        tabCheckList.addColumn(colQuestion);

        colQuestion.setHeader(
            new sap.m.Text({
                text: element.questionTitle,
            })
        );

        const colAnswer = new sap.m.Column({
            demandPopin: true,
            popinDisplay: "Block",
            minScreenWidth: "Tablet",
            width: "30%",
        });
        tabCheckList.addColumn(colAnswer);

        colAnswer.setHeader(
            new sap.m.Text({
                text: element.answerTitle,
            })
        );

        // Items
        element.items.forEach(function (item, index) {
            const itemCheckList = new sap.m.ColumnListItem("item" + item.id);

            itemCheckList.addCell(
                new sap.m.Label({
                    text: item.question,
                    required: item.required,
                })
            );

            let itemAnswer;

            switch (item.type) {
                case "Input":
                    itemAnswer = new sap.m.Input(FORMS.buildElementFieldID(item), {
                        value: "{/" + item.id + "}",
                    });
                    break;

                case "AcceptReject":
                    itemAnswer = new sap.m.Switch(FORMS.buildElementFieldID(item), {
                        state: "{/" + item.id + "}",
                        type: "AcceptReject",
                    });
                    break;

                case "CheckBox":
                    itemAnswer = new sap.m.CheckBox(FORMS.buildElementFieldID(item), {
                        selected: "{/" + item.id + "}",
                    });
                    break;

                default:
                    itemAnswer = new sap.m.Switch(FORMS.buildElementFieldID(item), {
                        state: "{/" + item.id + "}",
                    });
                    break;
            }

            itemCheckList.addCell(itemAnswer);
            tabCheckList.addItem(itemCheckList);
        });

        return tabCheckList;
    },

    getData: function () {
        const formModel = FORMS.formParent.getModel();
        return JSON.parse(JSON.stringify(formModel.oData));
    },

    setData: function (data) {
        const formModel = FORMS.formParent.getModel();
        formModel.setData(data);
        formModel.refresh();
    },

    clear: function () {
        const formModel = FORMS.formParent.getModel();
        formModel.setData({});
        formModel.refresh();
    },

    validate: function () {
        let validForm = true;

        FORMS.config.setup.forEach(function (element, i) {
            const formModel = FORMS.formParent.getModel();

            if (element.required) {
                const field = sap.ui.getCore().byId("field" + element.id);

                if (field && field.getVisible()) {
                    if (!formModel.oData[element.id]) {
                        validForm = false;
                        if (field.setValueState) field.setValueState("Error");

                        if (!field.setValueState) {
                            field.addStyleClass("notValid");
                        }
                    } else {
                        if (field.setValueState) field.setValueState();

                        if (!field.setValueState) {
                            field.removeStyleClass("notValid");
                        }
                    }
                }
            }
        });

        return validForm;
    },

    apiGetForm: function (id) {
        return new Promise(function (resolve) {
            $.ajax({
                type: "GET",
                url: "/api/serverscript/formsclient/get?id=" + id,
                success: function (req, status, xhr) {
                    resolve(req);
                },
                error: function (xhr, status, error) {
                    resolve();
                },
            });
        });
    },

    importImage: function (oEvent) {
        try {
            const file = oEvent.target.files[0];
            const fileReader = new FileReader();

            fileReader.onload = function (fileLoadedEvent) {
                const formModel = FORMS.formParent.getModel();
                formModel.oData[FORMS.elementUpload.id] = fileLoadedEvent.target.result;
                formModel.refresh();
                document.getElementById("imageUploader").value = "";
            };

            fileReader.readAsDataURL(file);
        } catch (e) {
            console.log(e);
        }
    },
};

window.importImage = FORMS.importImage;
