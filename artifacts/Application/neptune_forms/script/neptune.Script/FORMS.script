const FORMS = {
    model: null,
    config: null,
    cache: [],
    customerParent: null,
    formParent: null,
    formTitleHide: [],
    editable: true,
    bindingPath: "",
    columnTemplate: null,

    build: function (parent, options) {
        let formOptions;
        let formId;

        if (typeof options === "string") {
            formId = options;
            formOptions = {};
        } else {
            formId = options.id;
            formOptions = JSON.parse(JSON.stringify(options));
        }

        if (!parent) {
            sap.m.MessageToast.show("Parent UI Container is missing in the interface");
            return;
        }

        FORMS.customerParent = parent;

        if (!formOptions.config) {
            var actions = [];
            actions.push(FORMS.apiGetForm(formId));

            Promise.all(actions).then(function (values) {
                formOptions.config = values[0];
                FORMS.buildForm(parent, formOptions);
            });
        } else {
            FORMS.buildForm(parent, formOptions);
        }
    },

    buildForm: function (parent, options) {
        if (!options.config) {
            sap.m.MessageToast.show("FORM not found");
            return;
        }

        FORMS.editable = true;
        FORMS.formTitleHide = [];
        FORMS.config = options.config;

        // Parent
        if (!FORMS.formParent) {
            FORMS.formParent = new sap.m.Panel("_nepFormParent", {
                backgroundDesign: "Transparent",
            }).addStyleClass("sapUiNoContentPadding");

            FORMS.formParent.onAfterRendering = function (oEvent) {
                FORMS.formTitleHide.forEach(function (fieldID) {
                    const formTitle = sap.ui.getCore().byId(fieldID);
                    const formTitleDomRef = formTitle.getDomRef();
                    if (formTitleDomRef) {
                        formTitleDomRef.style.height = "0px";
                    }
                });
            };
        } else {
            FORMS.formParent.removeAllContent();
        }

        // Model
        const formModel = new sap.ui.model.json.JSONModel();

        if (options.data) {
            if (options.completed) FORMS.editable = false;
            formModel.setData(options.data);
        } else {
            formModel.setData({});
        }

        FORMS.formParent.setModel(formModel);
        formModel.refresh(true);

        let sectionParent;

        // Section
        options.config.setup.forEach(function (section, i) {
            if (section.disabled) return;

            switch (section.type) {
                case "Form":
                    FORMS.bindingPath = "/";
                    sectionParent = FORMS.buildParentForm(section);
                    break;

                case "Table":
                    FORMS.bindingPath = "";
                    sectionParent = FORMS.buildParentTable(section);
                    break;
            }

            // Elements
            section.elements.forEach(function (element, i) {
                FORMS.buildElement(sectionParent, element, section, i);
            });

            // Post processing
            switch (section.type) {
                case "Table":
                    sectionParent.bindAggregation("items", {
                        path: "/",
                        template: FORMS.columnTemplate,
                        templateShareable: false,
                    });

                    const tabModel = new sap.ui.model.json.JSONModel();
                    sectionParent.setModel(tabModel);

                    if (options.data && options.data[section.id]) {
                        tabModel.setData(options.data[section.id]);
                    } else {
                        let modelData = [];
                        let rows = section.rows || 5;

                        for (let i = 0; i < rows; i++) {
                            modelData.push({});
                        }

                        tabModel.setData(modelData);
                    }
                    break;
            }
        });

        if (parent.addContent) parent.addContent(FORMS.formParent);
        if (parent.addItem) parent.addItem(FORMS.formParent);
    },

    buildParentForm: function (section) {
        const sectionPanel = new sap.m.Panel({
            headerText: section.title,
            expandable: section.expandable,
            expanded: section.expanded,
        });

        const sectionForm = new sap.ui.layout.form.SimpleForm({
            layout: "ResponsiveGridLayout",
            editable: true,
            labelSpanL: parseInt(section.labelSpan) || 4,
            labelSpanM: parseInt(section.labelSpan) || 4,
            labelSpanS: 12,
            columnsL: parseInt(section.columns) || 2,
            columnsM: parseInt(section.columns) || 2,
        });

        if (section.enableCompact) sectionForm.addStyleClass("sapUiSizeCompact");

        sectionPanel.addContent(sectionForm);

        FORMS.formParent.addContent(sectionPanel);

        return sectionForm;
    },

    buildParentFormChildren: function (parent, element, section, index, elementField) {
        // Form Title
        if (element.type === "FormTitle") {
            parent.addContent(elementField);
            return;
        }

        // Label
        if (element.enableLabel) {
            const elementLabel = new sap.m.Label({
                text: element.title,
                required: element.required,
                design: "Bold",
            });

            if (section.labelLeftAlign) elementLabel.addStyleClass("nepLabelLeftAlign");

            parent.addContent(elementLabel);
        } else {
            parent.addContent(new sap.m.Label());
        }

        const elementParent = new sap.m.VBox({ width: "100%", wrap: "Wrap" });
        elementParent.addItem(elementField);

        // Description
        if (element.enableDescription) {
            elementParent.addItem(new sap.m.Label({ text: element.description, wrapping: true }));
        }

        // Duplicate
        if (element.enableDuplicate) {
            if (element.isDuplicate) {
                elementParent.addItem(
                    new sap.m.Button({
                        icon: "sap-icon://delete",
                        type: "Reject",
                        press: function (oEvent) {
                            let data = FORMS.getData();
                            data.completed = false;

                            let parentData = ModelData.FindFirst(
                                data.config.setup,
                                "id",
                                section.id
                            );
                            if (parentData) parentData.elements.splice(index, 1);

                            FORMS.build(FORMS.customerParent, data);
                        },
                    }).addStyleClass("sapUiSizeCompact")
                );
            } else {
                elementParent.addItem(
                    new sap.m.Button({
                        text: element.duplicateButtonText,
                        type: element.duplicateButtonType,
                        press: function (oEvent) {
                            let data = FORMS.getData();
                            data.completed = false;

                            let newElement = JSON.parse(JSON.stringify(element));
                            newElement.id = ModelData.genID();
                            newElement.isDuplicate = true;

                            if (newElement.items) {
                                newElement.items.forEach(function (item) {
                                    item.id = ModelData.genID();
                                });
                            }

                            let parentData = ModelData.FindFirst(
                                data.config.setup,
                                "id",
                                section.id
                            );
                            if (parentData) parentData.elements.splice(index + 1, 0, newElement);

                            FORMS.build(FORMS.customerParent, data);
                        },
                    }).addStyleClass("sapUiSizeCompact")
                );
            }
        }

        parent.addContent(elementParent);
    },

    buildParentTable: function (section) {
        const sectionPanel = new sap.m.Panel({
            headerText: section.title,
            expandable: section.expandable,
            expanded: section.expanded,
        });

        const sectionTable = new sap.m.Table(FORMS.buildElementFieldID(section), {
            autoPopinMode: true,
            showSeparators: sap.m.ListSeparators.None,
            backgroundDesign: "Transparent",
            contextualWidth: "Auto",
            showNoData: false,
        });

        if (section.enableCompact) sectionTable.addStyleClass("sapUiSizeCompact");

        FORMS.columnTemplate = new sap.m.ColumnListItem();

        if (section.vAlign) FORMS.columnTemplate.setVAlign(section.vAlign);

        sectionPanel.addContent(sectionTable);

        FORMS.formParent.addContent(sectionPanel);

        return sectionTable;
    },

    buildParentTableChildren: function (parent, element, section, index, elementField) {
        const newColumn = new sap.m.Column({
            demandPopin: true,
            popinDisplay: "Block",
            minScreenWidth: "Tablet",
        });

        parent.addColumn(newColumn);

        newColumn.setHeader(
            new sap.m.Label({
                text: element.title,
                required: element.required,
                design: "Bold",
            })
        );

        FORMS.columnTemplate.addCell(elementField);
    },

    buildElement: function (parent, element, section, index) {
        let elementField;

        if (element.disabled) return;

        switch (element.type) {
            case "FormTitle":
                elementField = FORMS.buildElementFormTitle(element);
                break;

            case "MessageStrip":
                elementField = FORMS.buildElementMessageStrip(element);
                break;

            case "Text":
                elementField = FORMS.buildElementText(element);
                break;

            case "TextArea":
                elementField = FORMS.buildElementTextArea(element);
                break;

            case "StepInput":
                elementField = FORMS.buildElementStepInput(element);
                break;

            case "Switch":
                elementField = FORMS.buildElementSwitch(element);
                break;

            case "CheckBox":
                elementField = FORMS.buildElementCheckBox(element);
                break;

            case "SingleSelect":
                elementField = FORMS.buildElementSingleSelect(element);
                break;

            case "SingleChoice":
                elementField = FORMS.buildElementSingleChoice(element);
                break;

            case "MultipleSelect":
                elementField = FORMS.buildElementMultipleSelect(element);
                break;

            case "MultipleChoice":
                elementField = FORMS.buildElementMultipleChoice(element);
                break;

            case "DatePicker":
                elementField = FORMS.buildElementDatePicker(element);
                break;

            case "Image":
                elementField = FORMS.buildElementImage(element);
                break;

            case "DateTimePicker":
                elementField = FORMS.buildElementDateTimePicker(element);
                break;

            case "CheckList":
                elementField = FORMS.buildElementCheckList(element);
                break;

            case "Input":
                elementField = FORMS.buildElementInput(element);
                break;

            default:
                break;
        }

        if (!elementField) return;

        switch (section.type) {
            case "Form":
                FORMS.buildParentFormChildren(parent, element, section, index, elementField);
                break;

            case "Table":
                FORMS.buildParentTableChildren(parent, element, section, index, elementField);
                break;

            default:
                break;
        }
    },

    buildElementFieldID: function (element) {
        return "field" + element.id;
    },

    buildElementMessageStrip: function (element) {
        return new sap.m.MessageStrip(FORMS.buildElementFieldID(element), {
            text: element.text,
            showIcon: element.messageIcon,
            type: element.messageType || "Information",
        });
    },

    buildElementFormTitle: function (element) {
        const newField = new sap.ui.core.Title(FORMS.buildElementFieldID(element), {
            text: element.enableLabel ? element.title : "",
        });

        if (!element.enableLabel) {
            FORMS.formTitleHide.push(FORMS.buildElementFieldID(element));
        }

        return newField;
    },

    buildElementInput: function (element) {
        const newField = new sap.m.Input(FORMS.buildElementFieldID(element), {
            value: "{" + FORMS.bindingPath + element.id + "}",
            editable: FORMS.editable,
            placeholder: element.placeholder,
        });

        return newField;
    },

    buildElementText: function (element) {
        const newField = new sap.m.Title(FORMS.buildElementFieldID(element), {
            text: element.text,
            titleStyle: element.titleStyle,
            wrapping: true,
        });

        return newField;
    },

    buildElementTextArea: function (element) {
        const newField = new sap.m.TextArea(FORMS.buildElementFieldID(element), {
            value: "{" + FORMS.bindingPath + element.id + "}",
            placeholder: element.placeholder,
            editable: FORMS.editable,
            growing: element.growing,
            rows: parseInt(element.rows),
            width: "100%",
        });
        if (element.rows) newField.setRows(parseInt(element.rows));

        return newField;
    },

    buildElementStepInput: function (element) {
        const newField = new sap.m.StepInput(FORMS.buildElementFieldID(element), {
            value: "{" + FORMS.bindingPath + element.id + "}",
            placeholder: element.placeholder,
            editable: FORMS.editable,
        });

        if (element.min) newField.setMin(parseInt(element.min));
        if (element.max) newField.setMax(parseInt(element.max));

        return newField;
    },

    buildElementSwitch: function (element) {
        const newField = new sap.m.Switch(FORMS.buildElementFieldID(element), {
            state: "{" + FORMS.bindingPath + element.id + "}",
            enabled: FORMS.editable,
            customTextOff: element.customTextOff,
            customTextOn: element.customTextOn,
        });

        if (element.approveSwitch) {
            newField.setType("AcceptReject");
        }

        return newField;
    },

    buildElementCheckBox: function (element) {
        const newField = new sap.m.CheckBox(FORMS.buildElementFieldID(element), {
            selected: "{" + FORMS.bindingPath + element.id + "}",
            editable: FORMS.editable,
            text: element.text,
        });

        return newField;
    },

    buildElementSingleSelect: function (element) {
        const newField = new sap.m.ComboBox(FORMS.buildElementFieldID(element), {
            selectedKey: "{" + FORMS.bindingPath + element.id + "}",
            width: "100%",
            editable: FORMS.editable,
        });

        element.items.forEach(function (item, i) {
            newField.addItem(new sap.ui.core.Item({ key: item.key, text: item.title }));
        });

        return newField;
    },

    buildElementSingleChoice: function (element) {
        let newField;

        if (element.horizontal) {
            newField = new sap.m.HBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
                renderType: "Bare",
            });
        } else {
            newField = new sap.m.VBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
                renderType: "Bare",
            });
        }

        const formModel = FORMS.formParent.getModel();

        element.items.forEach(function (item, i) {
            const elementRadio = new sap.m.RadioButton("item" + item.id, {
                text: item.title,
                groupName: element.id,
                editable: FORMS.editable,
                select: function (oEvent) {
                    const formModel = FORMS.formParent.getModel();
                    formModel.oData[element.id] = item.key;
                    formModel.refresh(true);
                },
            });

            if (element.enableWidth) {
                elementRadio.setWidth(element.width + "px");
            }

            // If Data Present
            if (formModel.oData[element.id] && formModel.oData[element.id] === item.key) {
                elementRadio.setSelected(true);
            }

            elementRadio.addStyleClass("sapUiTinyMarginBegin");
            newField.addItem(elementRadio);
        });

        return newField;
    },

    buildElementMultipleSelect: function (element) {
        const newField = new sap.m.MultiComboBox(FORMS.buildElementFieldID(element), {
            selectedKeys: "{" + FORMS.bindingPath + element.id + "}",
            width: "100%",
            editable: FORMS.editable,
        });

        element.items.forEach(function (item, i) {
            newField.addItem(new sap.ui.core.Item({ key: item.key, text: item.title }));
        });

        return newField;
    },

    buildElementMultipleChoice: function (element) {
        let newField;

        if (element.horizontal) {
            newField = new sap.m.HBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
                renderType: "Bare",
            });
        } else {
            newField = new sap.m.VBox(FORMS.buildElementFieldID(element), {
                wrap: "Wrap",
                renderType: "Bare",
            });
        }

        const formModel = FORMS.formParent.getModel();

        element.items.forEach(function (item, i) {
            const elementCheckBox = new sap.m.CheckBox("item" + item.id, {
                text: item.title,
                editable: FORMS.editable,
                select: function (oEvent) {
                    if (!formModel.oData[element.id]) formModel.oData[element.id] = [];

                    if (this.getSelected()) {
                        formModel.oData[element.id].push(item.key);
                    } else {
                        const index = formModel.oData[element.id].indexOf(item.key);
                        if (index > -1) formModel.oData[element.id].splice(index, 1);
                    }
                    formModel.refresh(true);
                },
            }).addStyleClass("sapUiTinyMarginBegin");

            if (element.enableWidth) {
                elementCheckBox.setWidth(element.width + "px");
            }

            // If Data Present
            if (formModel.oData[element.id] && formModel.oData[element.id].includes(item.key)) {
                elementCheckBox.setSelected(true);
            }

            newField.addItem(elementCheckBox);
        });

        return newField;
    },

    buildElementDatePicker: function (element) {
        const newField = new sap.m.DatePicker(FORMS.buildElementFieldID(element), {
            value: "{" + FORMS.bindingPath + element.id + "}",
            editable: FORMS.editable,
        });

        return newField;
    },

    buildElementImage: function (element) {
        const newField = new sap.m.VBox(FORMS.buildElementFieldID(element), {
            width: "100%",
        });

        const elementUploader = new sap.m.Button({
            type: element.buttonType,
            text: element.text,
            enabled: FORMS.editable,
            press: function (oEvent) {
                FORMS.elementUpload = element;
                $("#imageUploader").click();
            },
        }).addStyleClass("sapUiSizeCompact");

        const elementImage = new sap.m.Image({
            height: "200px",
            src: "{" + FORMS.bindingPath + element.id + "}",
        });

        newField.addItem(elementUploader);
        newField.addItem(elementImage);

        return newField;
    },

    buildElementDateTimePicker: function (element) {
        const newField = new sap.m.DateTimePicker(FORMS.buildElementFieldID(element), {
            value: "{" + FORMS.bindingPath + element.id + "}",
            editable: FORMS.editable,
        });

        return newField;
    },

    buildElementCheckList: function (element) {
        const tabCheckList = new sap.m.Table({
            showSeparators: sap.m.ListSeparators.None,
            backgroundDesign: "Transparent",
            contextualWidth: "Auto",
        });

        // Columns
        const colQuestion = new sap.m.Column();
        tabCheckList.addColumn(colQuestion);

        colQuestion.setHeader(
            new sap.m.Text({
                text: element.questionTitle,
            })
        );

        const colAnswer = new sap.m.Column({
            demandPopin: true,
            popinDisplay: "Block",
            minScreenWidth: "Tablet",
            width: "30%",
        });
        tabCheckList.addColumn(colAnswer);

        colAnswer.setHeader(
            new sap.m.Text({
                text: element.answerTitle,
            })
        );

        // Items
        element.items.forEach(function (item, index) {
            const itemCheckList = new sap.m.ColumnListItem("field" + item.id);

            itemCheckList.addCell(
                new sap.m.Label({
                    text: item.question,
                    required: item.required,
                })
            );

            let itemAnswer;

            switch (item.type) {
                case "Input":
                    itemAnswer = new sap.m.Input({
                        value: "{/" + item.id + "}",
                        editable: FORMS.editable,
                    });
                    break;

                case "AcceptReject":
                    itemAnswer = new sap.m.Switch({
                        state: "{/" + item.id + "}",
                        enabled: FORMS.editable,
                        type: "AcceptReject",
                    });
                    break;

                case "CheckBox":
                    itemAnswer = new sap.m.CheckBox({
                        selected: "{/" + item.id + "}",
                        editable: FORMS.editable,
                    });
                    break;

                default:
                    itemAnswer = new sap.m.Switch({
                        state: "{/" + item.id + "}",
                        enabled: FORMS.editable,
                    });
                    break;
            }

            itemCheckList.addCell(itemAnswer);
            tabCheckList.addItem(itemCheckList);
        });

        return tabCheckList;
    },

    getValid: function () {
        return FORMS.validate("OnlyCheck");
    },

    getData: function () {
        const formModel = FORMS.formParent.getModel();

        const outputData = {};

        FORMS.config.setup.forEach(function (section) {
            if (section.type === "Table") {
                const tabObject = sap.ui.getCore().byId("field" + section.id);
                const tabModel = tabObject.getModel();
                if (tabModel) {
                    outputData[section.id] = tabModel.oData;
                }
                return;
            }

            section.elements.forEach(function (element) {
                if (formModel.oData[element.id]) {
                    // if (element.fieldName) {
                    //     outputData[element.fieldName] = formModel.oData[element.id]; // TODO - Need in/out handling for fieldnames
                    // } else {
                    outputData[element.id] = formModel.oData[element.id];
                    // }
                }

                // CheckList
                if (element.type === "CheckList") {
                    element.items.forEach(function (item) {
                        if (formModel.oData[item.id]) {
                            // if (item.fieldName) {
                            //     outputData[item.fieldName] = formModel.oData[item.id]; // TODO - Need in/out handling for fieldnames
                            // } else {
                            outputData[item.id] = formModel.oData[item.id];
                            // }
                        }
                    });
                }
            });
        });

        const formData = {
            data: outputData,
            config: FORMS.config,
            completed: FORMS.validate("OnlyCheck"),
        };

        return formData;
    },

    setData: function (data) {
        const formModel = FORMS.formParent.getModel();
        formModel.setData(data);
        formModel.refresh();
    },

    clear: function () {
        // Model
        const formModel = FORMS.formParent.getModel();
        formModel.setData({});
        formModel.refresh();

        // Fields
        FORMS.validate("Reset");

        // Single/MultiChoice
        FORMS.config.setup.forEach(function (section, i) {
            section.elements.forEach(function (element, i) {
                if (element.type === "SingleChoice" || element.type === "MultipleChoice") {
                    element.items.forEach(function (item, i) {
                        const field = sap.ui.getCore().byId("item" + item.id);
                        if (field) field.setSelected(false);
                    });
                }
            });
        });
    },

    validate: function (process) {
        let validForm = true;
        let fieldCompleted;
        const formModel = FORMS.formParent.getModel();

        FORMS.config.setup.forEach(function (section, i) {
            section.elements.forEach(function (element, i) {
                if (element.required) {
                    fieldCompleted = formModel.oData[element.id] ? true : false;
                    if (validForm) validForm = fieldCompleted;
                    FORMS.validateMarkField(element.id, fieldCompleted, process);
                }

                // MultipleSelect/MultipleChoice
                if (
                    formModel.oData[element.id] &&
                    element.validationType !== "noLimit" &&
                    (element.type === "MultipleChoice" || element.type === "MultipleSelect")
                ) {
                    switch (element.validationType) {
                        case "equalTo":
                            if (
                                formModel.oData[element.id].length !==
                                parseInt(element.validationParam)
                            ) {
                                FORMS.validateMarkField(element.id, false, process);
                            }
                            break;

                        case "atMost":
                            if (
                                formModel.oData[element.id].length >
                                parseInt(element.validationParam)
                            ) {
                                FORMS.validateMarkField(element.id, false, process);
                            }
                            break;

                        case "atLeast":
                            if (
                                formModel.oData[element.id].length <
                                parseInt(element.validationParam)
                            ) {
                                FORMS.validateMarkField(element.id, false, process);
                            }
                            break;

                        default:
                            break;
                    }
                }

                if (element.type === "CheckList") {
                    element.items.forEach(function (item, i) {
                        if (item.required) {
                            const fieldCompleted = formModel.oData[item.id] ? true : false;
                            if (validForm) validForm = fieldCompleted;
                            FORMS.validateMarkField(item.id, fieldCompleted, process);
                        }
                    });
                }
            });
        });

        return validForm;
    },

    validateMarkField: function (id, valid, process) {
        if (process === "OnlyCheck") return;
        const validStatus = process === "Reset" ? true : valid;
        const field = sap.ui.getCore().byId("field" + id);

        if (!field) return;

        if (validStatus) {
            if (field.setValueState) {
                field.setValueState();
            } else {
                field.removeStyleClass("notValid");
            }

            if (field.setHighlight) field.setHighlight();
        } else {
            if (field.setValueState) {
                field.setValueState("Error");
            } else {
                field.addStyleClass("notValid");
            }

            if (field.setHighlight) field.setHighlight("Error");
        }
    },

    apiGetForm: function (id) {
        return new Promise(function (resolve) {
            $.ajax({
                type: "GET",
                url: "/api/serverscript/formsclient/get?id=" + id,
                success: function (req, status, xhr) {
                    resolve(req);
                },
                error: function (xhr, status, error) {
                    resolve();
                },
            });
        });
    },

    importImage: function (oEvent) {
        try {
            const file = oEvent.target.files[0];
            const fileReader = new FileReader();

            fileReader.onload = function (fileLoadedEvent) {
                let formModel;

                if (!FORMS.formParent) {
                    const formParent = sap.ui.getCore().byId("_nepFormParent");
                    formModel = formParent.getModel();
                } else {
                    formModel = FORMS.formParent.getModel();
                }

                formModel.oData[FORMS.elementUpload.id] = fileLoadedEvent.target.result;
                formModel.refresh();
                document.getElementById("imageUploader").value = "";
            };

            fileReader.readAsDataURL(file);
        } catch (e) {
            console.log(e);
        }
    },
};

window.importImage = FORMS.importImage;

// // TODO - Implement generic if we should have conditional visibility
// if (element.condField) {
//     const formatParts = "/" + element.id;

//     elementField.bindProperty("visible", {
//         parts: [formatParts],
//         formatter: function () {
//             const formModel = FORMS.formParent.getModel();
//             if (formModel.oData[element.condField] === element.condValue) {
//                 return true;
//             } else {
//                 return false;
//             }
//         },
//     });
// }

//
